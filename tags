!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
*	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> *       defx#do_action('toggle_select_all') " 选择$/;"	m
-	all_config_in_one_file.vim	/^    nnoremap <silent> - :ChooseWin<CR>$/;"	m
-	config/keymap.vim	/^    nnoremap <silent> - :ChooseWin<CR>$/;"	m
.	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> .       defx#do_action('toggle_ignored_files') " 显示隐/;"	m
/	config/plugins/fzf.vim.vim	/^nnoremap \/ :BLines<CR>$/;"	m
0	coc-settings.json	/^        ".git",$/;"	s	array:coc.preferences.rootPatterns
0	coc-settings.json	/^        "javascript",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
0	coc-settings.json	/^        {$/;"	o	array:explorer.sources
0	coc-settings.json	/^    "list.source.words.defaultArgs": ["-e"],$/;"	s	array:list.source.words.defaultArgs
1	coc-settings.json	/^        ".vim",$/;"	s	array:coc.preferences.rootPatterns
1	coc-settings.json	/^        "python",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
1	coc-settings.json	/^        {$/;"	o	array:explorer.sources
2	coc-settings.json	/^        ".projections.json",$/;"	s	array:coc.preferences.rootPatterns
2	coc-settings.json	/^        "java",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
3	coc-settings.json	/^        ".project"$/;"	s	array:coc.preferences.rootPatterns
3	coc-settings.json	/^        "json",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
4	coc-settings.json	/^        "c",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
5	coc-settings.json	/^        "cc",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
6	coc-settings.json	/^        "cu",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
7	coc-settings.json	/^        "cpp",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
8	coc-settings.json	/^        "go"$/;"	s	array:coc.preferences.formatOnSaveFiletypes
<2-LeftMouse>	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> <2-LeftMouse> defx#is_directory() ? defx#do_action('open/;"	m
<BackSpace>	all_config_in_one_file.vim	/^nnoremap <BackSpace> :nohl<cr> " 取消搜索高亮$/;"	m
<BackSpace>	all_config_in_one_file.vim	/^nnoremap <BackSpace> :nohl<cr>$/;"	m
<BackSpace>	config/keymap.vim	/^nnoremap <BackSpace> :nohl<cr> " 取消搜索高亮$/;"	m
<C-a>	all_config_in_one_file.vim	/^		nmap <silent> <C-a> :CocCommand document.renameCurrentWord<cr>$/;"	m
<C-a>	all_config_in_one_file.vim	/^inoremap <C-a> <esc>ggVG$/;"	m
<C-a>	config/plugins/coc.nvim.vim	/^	nmap <silent> <C-a> :CocCommand document.renameCurrentWord<cr>$/;"	m
<C-c>	all_config_in_one_file.vim	/^		nmap <silent> <C-c> <Plug>(coc-cursors-position)$/;"	m
<C-c>	config/plugins/coc.nvim.vim	/^	nmap <silent> <C-c> <Plug>(coc-cursors-position)$/;"	m
<C-d>	all_config_in_one_file.vim	/^		nmap <expr> <silent> <C-d> <SID>select_current_word()$/;"	m
<C-d>	all_config_in_one_file.vim	/^		xmap <silent> <C-d> y\/\\V<C-r>=escape(@",'\/\\')<CR><CR>gN<Plug>(coc-cursors-range)gn$/;"	m
<C-h>	all_config_in_one_file.vim	/^noremap <C-h> <C-w>h$/;"	m
<C-j>	all_config_in_one_file.vim	/^noremap <C-j> <C-w>j$/;"	m
<C-k>	all_config_in_one_file.vim	/^noremap <C-k> <C-w>k$/;"	m
<C-l>	all_config_in_one_file.vim	/^noremap <C-l> <C-w>l$/;"	m
<C-n>	config/plugins/coc.nvim.vim	/^	nmap <expr> <silent> <C-n> <SID>select_current_word()$/;"	m
<C-n>	config/plugins/coc.nvim.vim	/^	xmap <silent> <C-n> y\/\\V<C-r>=escape(@",'\/\\')<CR><CR>gN<Plug>(coc-cursors-range)gn$/;"	m
<C-p>	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> <C-p>   defx#do_action('print')$/;"	m
<C-r>	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> <C-r>   defx#do_action('redraw')$/;"	m
<C-s>	all_config_in_one_file.vim	/^inoremap <C-s> <esc>:w<cr>$/;"	m
<C-w>[	all_config_in_one_file.vim	/^nnoremap <C-w>[ :vertical resize -3<CR>$/;"	m
<C-w>]	all_config_in_one_file.vim	/^nnoremap <C-w>] :vertical resize +3<CR>$/;"	m
<C-x>	all_config_in_one_file.vim	/^    nnoremap <C-x>  :Bclose<CR>$/;"	m
<CR>	config/plugins/ncm2.vim	/^inoremap <expr> <CR> (pumvisible() ? "\\<c-y>\\<cr>" : "\\<CR>")$/;"	m
<Cr>	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> <Cr>    defx#do_action('drop')$/;"	m
<F2>	all_config_in_one_file.vim	/^	nmap <silent> <F2> :CocCommand explorer$/;"	m
<F2>	config/plugins/coc.nvim.vim	/^nmap <silent> <F2> :CocCommand explorer <cr>$/;"	m
<F2>	config/plugins/defx.nvim.vim	/^    nnoremap <silent> <F2> <esc>:call OpenDefxLeft()<cr>$/;"	m
<F2>	config/plugins/nnn.vim.vim	/^nnoremap <silent> <F2> :NnnPicker '%:p:h'<CR>$/;"	m
<F3>	all_config_in_one_file.vim	/^	nnoremap <F3> :call VistaToggle()<CR>$/;"	m
<F3>	all_config_in_one_file.vim	/^    nnoremap <F3> :TagbarToggle<cr>$/;"	m
<F3>	config/keymap.vim	/^    nnoremap <F3> :TagbarToggle<cr>$/;"	m
<F3>	config/plugins/tagbar.vim	/^    nnoremap <F3> :call Tagbar_Toggle()<CR>$/;"	m
<F3>	config/plugins/vista.vim.vim	/^nnoremap <F3> :Vista!!<CR>$/;"	m
<F4>	all_config_in_one_file.vim	/^	nmap <F4> <Plug>(quickrun)<cr>$/;"	m
<F4>	config/plugins/vim-quickrun.vim	/^nmap <F4> <Plug>(quickrun)<cr>$/;"	m
<F5>	config/plugins/undotree.vim	/^nnoremap <F5> :UndotreeToggle<cr>$/;"	m
<F5>	config/plugins/vim-mundo.vim	/^noremap <F5> <esc>:MundoToggle<cr>$/;"	m
<F7>	all_config_in_one_file.vim	/^    nnoremap <F7> <esc>:Goyo<cr>$/;"	m
<F7>	config/keymap.vim	/^    nnoremap <F7> <esc>:Goyo<cr>$/;"	m
<Leader>+	all_config_in_one_file.vim	/^nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3\/2)<CR>$/;"	m
<Leader>-	all_config_in_one_file.vim	/^nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2\/3)<CR>$/;"	m
<M-F>	config/plugins/LeaderF.vim	/^nnoremap <M-F> :LeaderfFunctionAll<CR>$/;"	m
<M-G>	all_config_in_one_file.vim	/^    nnoremap <M-G> :GFiles<CR>$/;"	m
<M-G>	config/plugins/fzf.vim.vim	/^nnoremap <M-G> :GFiles<CR>$/;"	m
<M-H>	config/keymap.vim	/^noremap <M-H> <C-w>h$/;"	m
<M-J>	config/keymap.vim	/^noremap <M-J> <C-w>j$/;"	m
<M-K>	config/keymap.vim	/^noremap <M-K> <C-w>k$/;"	m
<M-L>	config/keymap.vim	/^noremap <M-L> <C-w>l$/;"	m
<M-O>	all_config_in_one_file.vim	/^inoremap <M-O> <esc>O$/;"	m
<M-O>	config/keymap.vim	/^inoremap <M-O> <esc>O$/;"	m
<M-O>	config/plugins/coc.nvim.vim	/^	nnoremap <silent> <M-O> :CocList --auto-preview --interactive symbols<cr>$/;"	m
<M-S>	all_config_in_one_file.vim	/^		nnoremap <silent> <M-S> :CocList grep<cr>$/;"	m
<M-S>	all_config_in_one_file.vim	/^    nnoremap <M-S> :<C-hhhU><C-R>=printf("Leaderf rg -S --fullPath %s", getcwd())<cr><cr>$/;"	m
<M-S>	all_config_in_one_file.vim	/^    nnoremap <M-S> :Rg<CR>$/;"	m
<M-S>	config/plugins/LeaderF.vim	/^nnoremap <M-S> :LeaderfLineAll<CR>$/;"	m
<M-S>	config/plugins/coc.nvim.vim	/^	nnoremap <silent> <M-S> :CocList --interactive grep<cr>$/;"	m
<M-S>	config/plugins/fzf.vim.vim	/^nnoremap <M-S> :Rg<CR>$/;"	m
<M-T>	all_config_in_one_file.vim	/^    nnoremap <M-T> :Tags<CR>$/;"	m
<M-T>	config/plugins/LeaderF.vim	/^noremap <M-T> :LeaderfBufTagAll<cr>$/;"	m
<M-T>	config/plugins/fzf.vim.vim	/^nnoremap <M-T> :Tags<CR>$/;"	m
<M-W>	config/plugins/LeaderF.vim	/^noremap <M-W> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR><cr>$/;"	m
<M-b>	all_config_in_one_file.vim	/^		nnoremap <silent> <M-b> :CocList buffers<CR>$/;"	m
<M-b>	config/plugins/LeaderF.vim	/^noremap <M-b> :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>$/;"	m
<M-b>	config/plugins/coc.nvim.vim	/^	nnoremap <silent> <M-b> :CocList buffers<CR>$/;"	m
<M-c>	all_config_in_one_file.vim	/^		nnoremap <silent> <M-c> :exe 'CocList -I --input='.expand('<cword>').' words'<cr>$/;"	m
<M-c>	config/plugins/LeaderF.vim	/^noremap <M-c> :LeaderfCommand<cr>$/;"	m
<M-d>	all_config_in_one_file.vim	/^	nmap  <M-d> <Plug>(coc-translator-p)$/;"	m
<M-d>	config/plugins/coc.nvim.vim	/^nmap  <M-d> <Plug>(coc-translator-p)$/;"	m
<M-e>	all_config_in_one_file.vim	/^	nmap  <M-e> <Plug>(coc-translator-e)$/;"	m
<M-e>	config/plugins/coc.nvim.vim	/^nmap  <M-e> <Plug>(coc-translator-e)$/;"	m
<M-f>	all_config_in_one_file.vim	/^		nnoremap <silent> <M-f> :CocList files<CR>$/;"	m
<M-f>	all_config_in_one_file.vim	/^    nnoremap <M-f> :Files<CR>$/;"	m
<M-f>	all_config_in_one_file.vim	/^    nnoremap <M-f> :LeaderfFile<CR>$/;"	m
<M-f>	config/plugins/LeaderF.vim	/^nnoremap <M-f> :LeaderfFile<CR>$/;"	m
<M-f>	config/plugins/coc.nvim.vim	/^	nnoremap <silent> <M-f> :CocList --no-sort files <CR>$/;"	m
<M-f>	config/plugins/fzf.vim.vim	/^nnoremap <M-f> :Files<CR>$/;"	m
<M-g>	all_config_in_one_file.vim	/^    nnoremap <M-g> :GFiles?<CR>$/;"	m
<M-g>	config/plugins/fzf.vim.vim	/^nnoremap <M-g> :GFiles?<CR>$/;"	m
<M-h>	all_config_in_one_file.vim	/^    nnoremap  <M-h> :tabprevious<CR>$/;"	m
<M-h>	all_config_in_one_file.vim	/^inoremap <M-h> <esc>I$/;"	m
<M-h>	config/keymap.vim	/^inoremap <M-h> <esc>I$/;"	m
<M-h>	config/plugins/vim-airline.vim	/^	nmap <M-h> <Plug>AirlineSelectPrevTab$/;"	m
<M-h>	config/plugins/vim-airline.vim	/^    nnoremap  <M-h> :tabprevious<CR>$/;"	m
<M-i>	all_config_in_one_file.vim	/^    nnoremap <M-i> :Autoformat<cr>$/;"	m
<M-i>	config/keymap.vim	/^    nnoremap <M-i> :Autoformat<cr>$/;"	m
<M-j>	config/plugins/coc.nvim.vim	/^inoremap <silent><expr> <M-j>$/;"	m
<M-j>	config/plugins/coc.nvim.vim	/^nmap <silent> <M-j> <Plug>(coc-diagnostic-next)$/;"	m
<M-k>	config/plugins/coc.nvim.vim	/^inoremap <silent><expr> <M-k>$/;"	m
<M-k>	config/plugins/coc.nvim.vim	/^nmap <silent> <M-k> <Plug>(coc-diagnostic-prev)$/;"	m
<M-l>	all_config_in_one_file.vim	/^    nnoremap  <M-l> :tabnext<cr>$/;"	m
<M-l>	all_config_in_one_file.vim	/^inoremap <M-l> <esc>A$/;"	m
<M-l>	config/keymap.vim	/^inoremap <M-l> <esc>A$/;"	m
<M-l>	config/plugins/vim-airline.vim	/^	nmap <M-l> <Plug>AirlineSelectNextTab$/;"	m
<M-l>	config/plugins/vim-airline.vim	/^    nnoremap  <M-l> :tabnext<cr>$/;"	m
<M-m>	all_config_in_one_file.vim	/^		nnoremap <silent> <M-m> :CocList marks<CR>$/;"	m
<M-m>	all_config_in_one_file.vim	/^    nnoremap <M-m> :Marks<CR>$/;"	m
<M-m>	config/plugins/coc.nvim.vim	/^	nnoremap <silent> <M-m> :CocList marks<CR>$/;"	m
<M-m>	config/plugins/fzf.vim.vim	/^nnoremap <M-m> :Marks<CR>$/;"	m
<M-o>	all_config_in_one_file.vim	/^		nnoremap <silent> <M-o> :CocList outline<CR>$/;"	m
<M-o>	all_config_in_one_file.vim	/^    nnoremap <M-o> :Buffers<CR>$/;"	m
<M-o>	all_config_in_one_file.vim	/^    nnoremap <M-o> :LeaderfBufferAll<CR>$/;"	m
<M-o>	all_config_in_one_file.vim	/^inoremap <M-o> <esc>o$/;"	m
<M-o>	config/keymap.vim	/^inoremap <M-o> <esc>o$/;"	m
<M-o>	config/plugins/coc.nvim.vim	/^	nnoremap <silent> <M-o> :CocList --auto-preview outline<cr>$/;"	m
<M-o>	config/plugins/fzf.vim.vim	/^nnoremap <M-o> :Buffers<CR>$/;"	m
<M-q>	config/keymap.vim	/^nnoremap <M-q> <esc>:close<cr>$/;"	m
<M-q>	config/keymap.vim	/^vnoremap <M-q> <esc>:close<cr>$/;"	m
<M-r>	all_config_in_one_file.vim	/^		nnoremap <silent> <M-r> :CocList mru -A<CR>$/;"	m
<M-r>	all_config_in_one_file.vim	/^    nnoremap <M-r> :History<CR>$/;"	m
<M-r>	all_config_in_one_file.vim	/^    nnoremap <M-r> :LeaderfMru<CR>$/;"	m
<M-r>	config/plugins/LeaderF.vim	/^noremap <M-r> :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>$/;"	m
<M-r>	config/plugins/coc.nvim.vim	/^	nnoremap <silent> <M-r> :CocList mru -A<CR>$/;"	m
<M-r>	config/plugins/fzf.vim.vim	/^nnoremap <M-r> :History<CR>$/;"	m
<M-s>	all_config_in_one_file.vim	/^		nnoremap <silent> <M-s> :CocList lines<cr>$/;"	m
<M-s>	all_config_in_one_file.vim	/^    nnoremap <M-s> :BLines<CR>$/;"	m
<M-s>	all_config_in_one_file.vim	/^    nnoremap <M-s> :LeaderfLine<CR>$/;"	m
<M-s>	config/plugins/LeaderF.vim	/^nnoremap <M-s> :LeaderfLine<CR>$/;"	m
<M-s>	config/plugins/LeaderF.vim	/^xnoremap <M-s> :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR><cr>$/;"	m
<M-s>	config/plugins/coc.nvim.vim	/^	nnoremap <silent> <M-s> :CocList --auto-preview --interactive lines<cr>$/;"	m
<M-s>	config/plugins/fzf.vim.vim	/^nnoremap <M-s> :BLines<CR>$/;"	m
<M-t>	all_config_in_one_file.vim	/^		nnoremap <silent> <M-t> :CocList tags<cr>$/;"	m
<M-t>	all_config_in_one_file.vim	/^    nnoremap <M-t> :BTags<CR>$/;"	m
<M-t>	config/plugins/LeaderF.vim	/^noremap <M-t> :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>$/;"	m
<M-t>	config/plugins/fzf.vim.vim	/^nnoremap <M-t> :BTags<CR>$/;"	m
<M-w>	all_config_in_one_file.vim	/^		nnoremap <silent> <M-w> :CocList windows<CR>$/;"	m
<M-w>	all_config_in_one_file.vim	/^    nnoremap <M-w> :Windows<CR>$/;"	m
<M-w>	config/plugins/LeaderF.vim	/^noremap <M-w> :<C-U><C-R>=printf("Leaderf! rg --current-buffer -e %s ", expand("<cword>"))<CR><c/;"	m
<M-w>	config/plugins/coc.nvim.vim	/^	nnoremap <silent> <M-w> :exe 'CocList --normal --auto-preview --input='.expand('<cword>').' wor/;"	m
<M-w>	config/plugins/fzf.vim.vim	/^nnoremap <M-w> :Windows<CR>$/;"	m
<M-{>	all_config_in_one_file.vim	/^nnoremap <M-{> :vertical resize -5<CR> " 更改窗口宽度$/;"	m
<M-{>	config/keymap.vim	/^nnoremap <M-{> :vertical resize -5<CR> " 更改窗口宽度$/;"	m
<M-}>	all_config_in_one_file.vim	/^nnoremap <M-}> :vertical resize +5<CR>$/;"	m
<M-}>	config/keymap.vim	/^nnoremap <M-}> :vertical resize +5<CR>$/;"	m
<S-TAB>	all_config_in_one_file.vim	/^	inoremap <silent><expr> <S-TAB>$/;"	m
<S-TAB>	config/plugins/coc.nvim.vim	/^inoremap <silent><expr> <S-TAB>$/;"	m
<S-Tab>	config/plugins/ncm2.vim	/^inoremap <expr> <S-Tab> pumvisible() ? "\\<C-p>" : "\\<S-Tab>"$/;"	m
<TAB>	all_config_in_one_file.vim	/^	inoremap <silent><expr> <TAB>$/;"	m
<TAB>	config/plugins/coc.nvim.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<Tab>	config/plugins/ncm2.vim	/^inoremap <expr> <Tab> pumvisible() ? "\\<C-n>" : "\\<Tab>"$/;"	m
<c-c>	config/plugins/ncm2.vim	/^inoremap <c-c> <ESC>$/;"	m
<c-h>	all_config_in_one_file.vim	/^noremap <c-h> <C-w>h$/;"	m
<c-h>	config/keymap.vim	/^noremap <c-h> <C-w>h$/;"	m
<c-j>	all_config_in_one_file.vim	/^noremap <c-j> <C-w>j$/;"	m
<c-j>	config/keymap.vim	/^noremap <c-j> <C-w>j$/;"	m
<c-k>	all_config_in_one_file.vim	/^noremap <c-k> <C-w>k$/;"	m
<c-k>	config/keymap.vim	/^noremap <c-k> <C-w>k$/;"	m
<c-l>	all_config_in_one_file.vim	/^inoremap <c-l> <esc><right>xi$/;"	m
<c-l>	all_config_in_one_file.vim	/^noremap <c-l> <C-w>l$/;"	m
<c-l>	config/keymap.vim	/^noremap <c-l> <C-w>l$/;"	m
<c-space>	all_config_in_one_file.vim	/^	inoremap <expr><c-space> pumvisible() ? "\\<C-e>" : coc#refresh()$/;"	m
<c-w>h	all_config_in_one_file.vim	/^nnoremap <c-w>h :abo vsplit <cr>$/;"	m
<c-w>h	config/keymap.vim	/^nnoremap <c-w>h :abo vsplit <cr>$/;"	m
<c-w>j	all_config_in_one_file.vim	/^nnoremap <c-w>j :rightbelow split <cr>$/;"	m
<c-w>j	config/keymap.vim	/^nnoremap <c-w>j :rightbelow split <cr>$/;"	m
<c-w>k	all_config_in_one_file.vim	/^nnoremap <c-w>k :abo split <cr>$/;"	m
<c-w>k	config/keymap.vim	/^nnoremap <c-w>k :abo split <cr>$/;"	m
<c-w>l	all_config_in_one_file.vim	/^nnoremap <c-w>l :rightbelow vsplit <cr>$/;"	m
<c-w>l	config/keymap.vim	/^nnoremap <c-w>l :rightbelow vsplit <cr>$/;"	m
<c-w>o	all_config_in_one_file.vim	/^    nnoremap  <c-w>o :ZoomWinTabToggle<cr>$/;"	m
<c-w>o	config/keymap.vim	/^    nnoremap  <c-w>o :ZoomWinTabToggle<cr>$/;"	m
<c-w>s	all_config_in_one_file.vim	/^nnoremap <c-w>s <esc><c-w>s<esc><c-w>j$/;"	m
<c-w>v	all_config_in_one_file.vim	/^nnoremap <c-w>v <esc><c-w>v<esc><c-w>l$/;"	m
<c-x>	all_config_in_one_file.vim	/^    nnoremap <c-x> :bd<cr>$/;"	m
<cr>	all_config_in_one_file.vim	/^	inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<cr>	autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<cr>	config/plugins/coc.nvim.vim	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader>	config/plugins/vim-which-key.vim	/^nnoremap <silent> <leader>      :<c-u>WhichKey '<Space>'<CR>$/;"	m
<leader>a	all_config_in_one_file.vim	/^	nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>a	all_config_in_one_file.vim	/^	xmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	all_config_in_one_file.vim	/^	nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>al	all_config_in_one_file.vim	/^	nmap <leader>al  <Plug>(coc-codeaction)$/;"	m
<leader>f	config/plugins/ranger.vim.vim	/^noremap <leader>f :RangerCurrentFile<cr>$/;"	m
<leader>fd	config/plugins/LeaderF.vim	/^noremap <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR>/;"	m
<leader>fn	config/plugins/LeaderF.vim	/^noremap <leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>$/;"	m
<leader>fo	config/plugins/LeaderF.vim	/^noremap <leader>fo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>$/;"	m
<leader>fp	config/plugins/LeaderF.vim	/^noremap <leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>$/;"	m
<leader>fr	config/plugins/LeaderF.vim	/^noremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR>/;"	m
<leader>j	all_config_in_one_file.vim	/^	nmap <silent> <leader>j <Plug>(coc-diagnostic-next)$/;"	m
<leader>k	all_config_in_one_file.vim	/^	nmap <silent> <leader>k <Plug>(coc-diagnostic-prev)$/;"	m
<leader>r	all_config_in_one_file.vim	/^	nmap <leader>r <Plug>(quickrun)$/;"	m
<leader>r	all_config_in_one_file.vim	/^	vmap <leader>r <Plug>(quickrun)$/;"	m
<leader>r	config/plugins/vim-dispatch.vim	/^nnoremap <leader>r :Dispatch<cr>$/;"	m
<leader>r	config/plugins/vim-quickrun.vim	/^nmap <leader>r <Plug>(quickrun)$/;"	m
<leader>r	config/plugins/vim-quickrun.vim	/^vmap <leader>r <Plug>(quickrun)$/;"	m
<leader>s	all_config_in_one_file.vim	/^    noremap <leader>s <esc>:Startify<cr>$/;"	m
<leader>s	config/keymap.vim	/^    noremap <leader>s <esc>:Startify<cr>$/;"	m
<leader>tM	config/keymap.vim	/^nnoremap <silent> <leader>tM :-tabmove<cr>$/;"	m
<leader>tN	config/keymap.vim	/^nnoremap <silent> <leader>tN :call <SID>new_tab_before()<cr> " 在前么新建一个tab$/;"	m
<leader>tc	all_config_in_one_file.vim	/^nnoremap <leader>tc :tabclose<cr>$/;"	m
<leader>tc	config/keymap.vim	/^nnoremap <silent> <leader>tc :tabclose<cr>$/;"	m
<leader>te	all_config_in_one_file.vim	/^nnoremap <leader>te :tabedit$/;"	m
<leader>tm	all_config_in_one_file.vim	/^nnoremap <leader>tm :tabmove$/;"	m
<leader>tm	config/keymap.vim	/^nnoremap <silent> <leader>tm :+tabmove<cr>$/;"	m
<leader>tn	all_config_in_one_file.vim	/^nnoremap <leader>tn :tabnew<cr>$/;"	m
<leader>tn	config/keymap.vim	/^nnoremap <silent> <leader>tn :tabnew<cr>$/;"	m
<leader>x	all_config_in_one_file.vim	/^		nmap <leader>x  <Plug>(coc-cursors-operator)$/;"	m
<leader>x	config/plugins/coc.nvim.vim	/^	nmap <leader>x  <Plug>(coc-cursors-operator)$/;"	m
<localleader>	config/plugins/vim-which-key.vim	/^nnoremap <silent> <localleader> :<c-u>WhichKey  ','<CR>$/;"	m
<plug>(plug-preview)	autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
<space>,	config/plugins/jupyter-vim.vim	/^nnoremap <silent> <space>, :JupyterSendCount<cr><down>$/;"	m
<space>,	config/plugins/jupyter-vim.vim	/^vnoremap <silent> <space>, :JupyterSendRange<cr><down>$/;"	m
<space><space>	all_config_in_one_file.vim	/^noremap <space><space> <esc>:w<cr>$/;"	m
<space><space>	all_config_in_one_file.vim	/^noremap <space><space> <esc>:w<cr><left> " 两个space保存所有文件$/;"	m
<space><space>	config/keymap.vim	/^noremap <space><space> <esc>:w<cr><left> " 两个space保存所有文件$/;"	m
<space>S	config/plugins/coc-fzf.vim	/^nnoremap <silent> <space>S  :<C-u>CocFzfListServices<CR>$/;"	m
<space>`	all_config_in_one_file.vim	/^	nnoremap <silent> <space>`  :<C-u>CocList folders<cr>$/;"	m
<space>a	all_config_in_one_file.vim	/^	nnoremap <silent> <space>a  :<C-u>CocList --normal diagnostics<cr>$/;"	m
<space>a	config/plugins/coc-fzf.vim	/^nnoremap <silent> <space>a  :<C-u>CocFzfListDiagnostics<CR>$/;"	m
<space>a	config/plugins/coc.nvim.vim	/^nnoremap <silent> <space>a  :<C-u>CocList --normal diagnostics<cr>$/;"	m
<space>c	all_config_in_one_file.vim	/^	nnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>c	all_config_in_one_file.vim	/^	vnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>c	config/plugins/coc-fzf.vim	/^nnoremap <silent> <space>c  :<C-u>CocFzfListCommands<CR>$/;"	m
<space>c	config/plugins/coc.nvim.vim	/^nnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>c	config/plugins/coc.nvim.vim	/^vnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>e	all_config_in_one_file.vim	/^	nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>e	config/plugins/coc-fzf.vim	/^nnoremap <silent> <space>e  :<C-u>CocFzfListExtensions<CR>$/;"	m
<space>e	config/plugins/coc.nvim.vim	/^nnoremap <silent> <space>e  :<C-u>CocList services<cr>$/;"	m
<space>f	all_config_in_one_file.vim	/^	nmap <space>f  <Plug>(coc-fix-current)$/;"	m
<space>f	config/plugins/coc.nvim.vim	/^nmap <space>f  <Plug>(coc-fix-current)$/;"	m
<space>k	all_config_in_one_file.vim	/^	nnoremap <silent> <space>k :call CocActionAsync('showSignatureHelp')<CR>$/;"	m
<space>k	config/plugins/coc.nvim.vim	/^nnoremap <silent> <space>k :call CocActionAsync('showSignatureHelp')<CR>$/;"	m
<space>l	all_config_in_one_file.vim	/^	nnoremap <silent> <space>l  :<C-u>CocList<CR>$/;"	m
<space>l	config/plugins/LanguageClient-neovim.vim	/^nnoremap <space>l :call LanguageClient_contextMenu()<CR>$/;"	m
<space>l	config/plugins/coc-fzf.vim	/^nnoremap <silent> <space>l  :<C-u>CocFzfListLocation<CR>$/;"	m
<space>l	config/plugins/coc.nvim.vim	/^nnoremap <silent> <space>l  :<C-u>CocList<CR>$/;"	m
<space>o	all_config_in_one_file.vim	/^		nnoremap <silent> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>o	config/plugins/coc-fzf.vim	/^nnoremap <silent> <space>o  :<C-u>CocFzfListOutline<CR>$/;"	m
<space>p	all_config_in_one_file.vim	/^	nnoremap <silent> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>p	config/plugins/coc-fzf.vim	/^nnoremap <silent> <space>p  :<C-u>CocFzfListResume<CR>$/;"	m
<space>p	config/plugins/coc.nvim.vim	/^nnoremap <silent> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>rf	all_config_in_one_file.vim	/^		nmap <silent> <space>rf <Plug>(coc-refactor)$/;"	m
<space>rf	config/plugins/coc.nvim.vim	/^nmap <silent> <space>rf <Plug>(coc-refactor)$/;"	m
<space>rn	all_config_in_one_file.vim	/^	nmap <space>rn <Plug>(coc-rename)$/;"	m
<space>rn	config/plugins/LanguageClient-neovim.vim	/^nnoremap <silent> <space>rn :call LanguageClient#textDocument_rename()<CR>$/;"	m
<space>rn	config/plugins/coc.nvim.vim	/^nmap <space>rn <Plug>(coc-rename)$/;"	m
<space>s	all_config_in_one_file.vim	/^	nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
<space>s	config/plugins/coc-fzf.vim	/^nnoremap <silent> <space>s  :<C-u>CocFzfListSymbols<CR>$/;"	m
<space>y	all_config_in_one_file.vim	/^	nnoremap <silent> <space>y  :<C-u>CocList yank<cr>$/;"	m
<space>y	config/plugins/coc.nvim.vim	/^nnoremap <silent> <space>y  :<C-u>CocList yank<cr>$/;"	m
<space>{	all_config_in_one_file.vim	/^    nmap <silent> <space>{ <Plug>(ale_previous_wrap)$/;"	m
<space>{	config/keymap.vim	/^    nmap <silent> <space>{ <Plug>(ale_previous_wrap)$/;"	m
<space>}	all_config_in_one_file.vim	/^    nmap <silent> <space>} <Plug>(ale_next_wrap)$/;"	m
<space>}	config/keymap.vim	/^    nmap <silent> <space>} <Plug>(ale_next_wrap)$/;"	m
>	config/keymap.vim	/^    nnoremap  <silent>> <M-h> :tabprevious<CR>$/;"	m
>	config/keymap.vim	/^    nnoremap  <silent>> <M-l> :tabnext<cr>$/;"	m
?	config/plugins/fzf.vim.vim	/^nnoremap ? :Rg<CR>$/;"	m
ActionMenuCodeActions	config/plugins/actionmenu.vim.vim	/^func! ActionMenuCodeActions() abort$/;"	f
ActionMenuCodeActionsCallback	config/plugins/actionmenu.vim.vim	/^func! ActionMenuCodeActionsCallback(index, item) abort$/;"	f
AutoPairsCenterLine	sessions/default.vim	/^let AutoPairsCenterLine =  1 $/;"	v
AutoPairsFlyMode	sessions/default.vim	/^let AutoPairsFlyMode =  0 $/;"	v
AutoPairsLoaded	sessions/default.vim	/^let AutoPairsLoaded =  1 $/;"	v
AutoPairsMapBS	sessions/default.vim	/^let AutoPairsMapBS =  1 $/;"	v
AutoPairsMapCR	sessions/default.vim	/^let AutoPairsMapCR =  1 $/;"	v
AutoPairsMapCh	sessions/default.vim	/^let AutoPairsMapCh =  1 $/;"	v
AutoPairsMapSpace	sessions/default.vim	/^let AutoPairsMapSpace =  1 $/;"	v
AutoPairsMoveCharacter	sessions/default.vim	/^let AutoPairsMoveCharacter = "()[]{}\\"'"$/;"	v
AutoPairsMultilineClose	sessions/default.vim	/^let AutoPairsMultilineClose =  1 $/;"	v
AutoPairsShortcutBackInsert	sessions/default.vim	/^let AutoPairsShortcutBackInsert = "<M-b>"$/;"	v
AutoPairsShortcutFastWrap	sessions/default.vim	/^let AutoPairsShortcutFastWrap = "<M-e>"$/;"	v
AutoPairsShortcutJump	sessions/default.vim	/^let AutoPairsShortcutJump = "<M-n>"$/;"	v
AutoPairsShortcutToggle	sessions/default.vim	/^let AutoPairsShortcutToggle = "<M-p>"$/;"	v
AutoPairsSmartQuotes	sessions/default.vim	/^let AutoPairsSmartQuotes =  1 $/;"	v
AutoPairsWildClosedPair	sessions/default.vim	/^let AutoPairsWildClosedPair = ""$/;"	v
D	autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
D	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> D       defx#do_action('remove_trash') " 删除$/;"	m
DefxSmartBigL	config/plugins/defx.nvim.vim	/^    function! DefxSmartBigL(_)$/;"	f
DefxSmartCr	config/plugins/defx.nvim.vim	/^    function! DefxSmartCr(_)$/;"	f
DefxSmartH	config/plugins/defx.nvim.vim	/^    function! DefxSmartH(_)$/;"	f
DefxSmartL	config/plugins/defx.nvim.vim	/^    function! DefxSmartL(_)$/;"	f
DefxSmartO	config/plugins/defx.nvim.vim	/^    function! DefxSmartO(_)$/;"	f
Fold	all_config_in_one_file.vim	/^	command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Fold	config/plugins/coc.nvim.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	all_config_in_one_file.vim	/^	command! -nargs=0 Format :call CocAction('format')$/;"	c
Format	config/plugins/coc.nvim.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
HasInstall	all_config_in_one_file.vim	/^fun! HasInstall(plugin_name) abort$/;"	f
HasInstall	config/plug.vim	/^fun! HasInstall(plugin_name) abort$/;"	f
HasPlug	all_config_in_one_file.vim	/^fun! HasPlug(plugName)$/;"	f
HasPlug	config/plug.vim	/^fun! HasPlug(plugName)$/;"	f
J	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> J       defx#do_action('toggle_select') . 'j' " 选择$/;"	m
K	all_config_in_one_file.vim	/^	nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
K	config/plugins/LanguageClient-neovim.vim	/^nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>$/;"	m
K	config/plugins/ale.vim	/^nmap K :ALEHover<cr>$/;"	m
K	config/plugins/coc.nvim.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
K	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> K       defx#do_action('toggle_select') . 'k' " 选择$/;"	m
L	autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> L       defx#do_action('call', 'DefxSmartBigL')$/;"	m
LightLineCocError	all_config_in_one_file.vim	/^	function! LightLineCocError()$/;"	f
LightLineCocError	config/plugins/lightline.vim.vim	/^function! LightLineCocError()$/;"	f
LightLineCocWarn	all_config_in_one_file.vim	/^	function! LightLineCocWarn() abort$/;"	f
LightLineCocWarn	config/plugins/lightline.vim.vim	/^function! LightLineCocWarn() abort$/;"	f
LightLineGit	all_config_in_one_file.vim	/^	function! LightLineGit()abort$/;"	f
LightLineGit	config/plugins/lightline.vim.vim	/^function! LightLineGit()abort$/;"	f
LightLineReadonly	all_config_in_one_file.vim	/^	function! LightLineReadonly()$/;"	f
LightLineReadonly	config/plugins/lightline.vim.vim	/^function! LightLineReadonly()$/;"	f
LightlineCocFixes	all_config_in_one_file.vim	/^	function! LightlineCocFixes() abort$/;"	f
LightlineCocFixes	config/plugins/lightline.vim.vim	/^function! LightlineCocFixes() abort$/;"	f
LightlineLineinfo	all_config_in_one_file.vim	/^	function! LightlineLineinfo() abort$/;"	f
LightlineLineinfo	config/plugins/lightline.vim.vim	/^function! LightlineLineinfo() abort$/;"	f
LoadScript	init.vim	/^command! -nargs=1 LoadScript exec 'source '.s:home.'\/'.'<args>'$/;"	c
LoadScript	vimrc	/^command! -nargs=1 LoadScript exec 'source '.s:home.'\/'.'<args>'$/;"	c
M	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> M       defx#do_action('move') " 移动$/;"	m
Mp	all_config_in_one_file.vim	/^		command! -nargs=0 Mp :MarkdownPreview<cr>$/;"	c
Mp	config/plugins/vim-markdown.vim	/^    command! -nargs=0 Mp :MarkdownPreview<cr>$/;"	c
N	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> N       defx#do_action('new_file') " 新建文件\/文件/;"	m
NERDAllowAnyVisualDelims	sessions/default.vim	/^let NERDAllowAnyVisualDelims = "1"$/;"	v
NERDBlockComIgnoreEmpty	sessions/default.vim	/^let NERDBlockComIgnoreEmpty = "0"$/;"	v
NERDCommentEmptyLines	sessions/default.vim	/^let NERDCommentEmptyLines = "0"$/;"	v
NERDCommentWholeLinesInVMode	sessions/default.vim	/^let NERDCommentWholeLinesInVMode = "0"$/;"	v
NERDCompactSexyComs	sessions/default.vim	/^let NERDCompactSexyComs = "0"$/;"	v
NERDCreateDefaultMappings	sessions/default.vim	/^let NERDCreateDefaultMappings = "1"$/;"	v
NERDDefaultAlign	sessions/default.vim	/^let NERDDefaultAlign = "none"$/;"	v
NERDDefaultNesting	sessions/default.vim	/^let NERDDefaultNesting = "1"$/;"	v
NERDDisableTabsInBlockComm	sessions/default.vim	/^let NERDDisableTabsInBlockComm = "0"$/;"	v
NERDLPlace	sessions/default.vim	/^let NERDLPlace = "[>"$/;"	v
NERDMenuMode	sessions/default.vim	/^let NERDMenuMode = "3"$/;"	v
NERDRPlace	sessions/default.vim	/^let NERDRPlace = "<]"$/;"	v
NERDRemoveAltComs	sessions/default.vim	/^let NERDRemoveAltComs = "1"$/;"	v
NERDRemoveExtraSpaces	sessions/default.vim	/^let NERDRemoveExtraSpaces = "0"$/;"	v
NERDSpaceDelims	sessions/default.vim	/^let NERDSpaceDelims =  1 $/;"	v
NERDToggleCheckAllLines	sessions/default.vim	/^let NERDToggleCheckAllLines =  1 $/;"	v
NERDTrimTrailingWhitespace	sessions/default.vim	/^let NERDTrimTrailingWhitespace = "0"$/;"	v
NERDUsePlaceHolders	sessions/default.vim	/^let NERDUsePlaceHolders = "1"$/;"	v
NearestMethodOrFunction	all_config_in_one_file.vim	/^		function! NearestMethodOrFunction() abort$/;"	f
NearestMethodOrFunction	config/plugins/vista.vim.vim	/^function! NearestMethodOrFunction() abort$/;"	f
OR	all_config_in_one_file.vim	/^	command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
OpenDefx	config/plugins/defx.nvim.vim	/^    function! OpenDefx() abort$/;"	f
OpenDefxCurWin	config/plugins/defx.nvim.vim	/^    function! OpenDefxCurWin()$/;"	f
OpenDefxLeft	config/plugins/defx.nvim.vim	/^    function! OpenDefxLeft()$/;"	f
P	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> P       defx#do_action('paste') " 粘贴$/;"	m
Plug	autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
R	autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
R	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> R       defx#do_action('rename') " 重命名$/;"	m
Run	all_config_in_one_file.vim	/^	command! -nargs=0 Run :call CocAction('codeAction')$/;"	c
S	autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
S	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> S       defx#do_action('toggle_sort') " 排序$/;"	m
SessionLoad	sessions/default.vim	/^let SessionLoad = 1$/;"	v
Tabline	colors/rafi-2017.vim	/^function! Tabline() abort "{{{$/;"	f
Tagbar_Toggle	config/plugins/tagbar.vim	/^    function! Tagbar_Toggle()$/;"	f
U	autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
VM_check_mappings	sessions/default.vim	/^let VM_check_mappings =  1 $/;"	v
VM_default_mappings	sessions/default.vim	/^let VM_default_mappings =  0 $/;"	v
VM_highlight_matches	sessions/default.vim	/^let VM_highlight_matches = "underline"$/;"	v
VM_mouse_mappings	sessions/default.vim	/^let VM_mouse_mappings =  0 $/;"	v
VM_persistent_registers	sessions/default.vim	/^let VM_persistent_registers =  0 $/;"	v
VM_show_warnings	sessions/default.vim	/^let VM_show_warnings =  0 $/;"	v
VM_theme	sessions/default.vim	/^let VM_theme = "ocean"$/;"	v
VistaToggle	all_config_in_one_file.vim	/^	function! VistaToggle() abort$/;"	f
WindowNumber	config/plugins/vim-airline.vim	/^function! WindowNumber(...)$/;"	f
X	autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
X	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> X       defx#do_action('execute_system') " 执行$/;"	m
Y	all_config_in_one_file.vim	/^nnoremap Y y$ " 复制到末尾$/;"	m
Y	all_config_in_one_file.vim	/^nnoremap Y y\$$/;"	m
Y	config/keymap.vim	/^nnoremap Y y$ " 复制到末尾$/;"	m
Y	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> Y       defx#do_action('copy') " 复制$/;"	m
ZoomWin	all_config_in_one_file.vim	/^		command! ZoomWin call ZoomWin()$/;"	c
ZoomWin	config/plugins/goyo.vim.vim	/^	command! ZoomWin call ZoomWin()$/;"	c
[[	autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
\x21	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> !       defx#do_action('execute_command')$/;"	m
]]	autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
`	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> `       defx#do_action('cd', getcwd()) " 回到工作目/;"	m
buffer与文件检索操作	README.md	/^#### buffer与文件检索操作$/;"	t
cd	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> cd      defx#do_action('change_vim_cwd') " 将当前目录/;"	m
coc.preferences.formatOnSaveFiletypes	coc-settings.json	/^    "coc.preferences.formatOnSaveFiletypes": [$/;"	a
coc.preferences.rootPatterns	coc-settings.json	/^    "coc.preferences.rootPatterns": [$/;"	a
config_path	init.vim	/^		let config_path = join([s:plugin_config_path, plugin_name], "\/").".vim"$/;"	v
config_path	vimrc	/^		let config_path = join([s:plugin_config_path, plugin_name], "\/").".vim"$/;"	v
d	autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
dd	autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
diagnostic.displayByAle	coc-settings.json	/^    "diagnostic.displayByAle": false,$/;"	b
diagnostic.errorSign	coc-settings.json	/^    "diagnostic.errorSign": "●",$/;"	s
diagnostic.hintSign	coc-settings.json	/^    "diagnostic.hintSign": ">>",$/;"	s
diagnostic.infoSign	coc-settings.json	/^    "diagnostic.infoSign": ">>",$/;"	s
diagnostic.maxWindowHeight	coc-settings.json	/^    "diagnostic.maxWindowHeight": 10, \/\/ 窗口最大高度$/;"	n
diagnostic.warningSign	coc-settings.json	/^    "diagnostic.warningSign": "●",$/;"	s
expand	coc-settings.json	/^            "expand": true$/;"	b	object:explorer.sources.0
expand	coc-settings.json	/^            "expand": true$/;"	b	object:explorer.sources.1
explorer.buffer.child.labelingTemplate	coc-settings.json	/^    "explorer.buffer.child.labelingTemplate": "[name][bufname][fullpath][modified][readonly]",$/;"	s
explorer.buffer.child.template	coc-settings.json	/^    "explorer.buffer.child.template": "[selection | 1] [bufnr] [name][modified][readonly] [fullp/;"	s
explorer.buffer.root.template	coc-settings.json	/^    "explorer.buffer.root.template": "[icon] [title]",$/;"	s
explorer.file.child.labelingTemplate	coc-settings.json	/^    "explorer.file.child.labelingTemplate": "[fullpath][link][diagnosticWarning][diagnosticError/;"	s
explorer.file.child.template	coc-settings.json	/^    "explorer.file.child.template": "[git | 2] [selection | clip | 1] [indent] [icon | 1] [diagn/;"	s
explorer.file.root.template	coc-settings.json	/^    "explorer.file.root.template": "[icon] [title] [root] [fullpath]",$/;"	s
explorer.keyMappingMode	coc-settings.json	/^    "explorer.keyMappingMode": "none", \/\/ 取消所有默认的映射，使用自己的$/;"	s
explorer.position	coc-settings.json	/^    "explorer.position": "left",$/;"	s
explorer.sources	coc-settings.json	/^    "explorer.sources": [$/;"	a
explorer.width	coc-settings.json	/^    "explorer.width": 40,$/;"	n
filetypedetect	autoload/plug.vim	/^        augroup filetypedetect$/;"	a
g:DoxygenToolkit_authorName	config/plugins/DoxygenToolkit.vim.vim	/^let g:DoxygenToolkit_authorName="fgh"$/;"	v
g:DoxygenToolkit_briefTag_pre	config/plugins/DoxygenToolkit.vim.vim	/^let g:DoxygenToolkit_briefTag_pre="@brief:  "$/;"	v
g:DoxygenToolkit_companyName	config/plugins/DoxygenToolkit.vim.vim	/^let g:DoxygenToolkit_companyName="bupt"$/;"	v
g:DoxygenToolkit_paramTag_pre	config/plugins/DoxygenToolkit.vim.vim	/^let g:DoxygenToolkit_paramTag_pre="@param   "$/;"	v
g:DoxygenToolkit_returnTag	config/plugins/DoxygenToolkit.vim.vim	/^let g:DoxygenToolkit_returnTag=   "@return  "$/;"	v
g:EasyMotion_do_mapping	config/plugins/vim-easymotion.vim	/^let g:EasyMotion_do_mapping = 0$/;"	v
g:EasyMotion_smartcase	config/plugins/vim-easymotion.vim	/^let g:EasyMotion_smartcase = 1$/;"	v
g:LanguageClient_serverCommands	config/plugins/LanguageClient-neovim.vim	/^let g:LanguageClient_serverCommands = {$/;"	v
g:Lf_GtagsAutoGenerate	config/plugins/LeaderF.vim	/^let g:Lf_GtagsAutoGenerate = 0$/;"	v
g:Lf_Gtagslabel	config/plugins/LeaderF.vim	/^let g:Lf_Gtagslabel = 'native-pygments'$/;"	v
g:Lf_HideHelp	config/plugins/LeaderF.vim	/^let g:Lf_HideHelp = 1$/;"	v
g:Lf_IgnoreCurrentBufferName	config/plugins/LeaderF.vim	/^let g:Lf_IgnoreCurrentBufferName = 1$/;"	v
g:Lf_PreviewInPopup	config/plugins/LeaderF.vim	/^let g:Lf_PreviewInPopup = 1$/;"	v
g:Lf_PreviewResult	config/plugins/LeaderF.vim	/^let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }$/;"	v
g:Lf_StlSeparator	config/plugins/LeaderF.vim	/^let g:Lf_StlSeparator = { 'left': "\\ue0b0", 'right': "\\ue0b2", 'font': "DejaVu Sans Mono for P/;"	v
g:Lf_UseCache	config/plugins/LeaderF.vim	/^let g:Lf_UseCache = 0$/;"	v
g:Lf_UseVersionControlTool	config/plugins/LeaderF.vim	/^let g:Lf_UseVersionControlTool = 0$/;"	v
g:Lf_WindowPosition	config/plugins/LeaderF.vim	/^let g:Lf_WindowPosition = 'popup'$/;"	v
g:NERDSpaceDelims	all_config_in_one_file.vim	/^	let g:NERDSpaceDelims = 1$/;"	v
g:NERDSpaceDelims	config/plugins/nerdcommenter.vim	/^let g:NERDSpaceDelims = 1$/;"	v
g:NERDToggleCheckAllLines	all_config_in_one_file.vim	/^	let g:NERDToggleCheckAllLines = 1$/;"	v
g:NERDToggleCheckAllLines	config/plugins/nerdcommenter.vim	/^let g:NERDToggleCheckAllLines = 1$/;"	v
g:NERDTreeDirArrowCollapsible	colors/rafi-2017.vim	/^let g:NERDTreeDirArrowCollapsible = '▼'$/;"	v
g:NERDTreeDirArrowExpandable	colors/rafi-2017.vim	/^let g:NERDTreeDirArrowExpandable = '▷'$/;"	v
g:NERDTreeHijackNetrw	config/plugins/ranger.vim.vim	/^let g:NERDTreeHijackNetrw = 0 " add this line if you use NERDTree$/;"	v
g:NERDTreeIndicatorMapCustom	colors/rafi-2017.vim	/^let g:NERDTreeIndicatorMapCustom = {$/;"	v
g:UltiSnipsJumpBackwardTrigger	config/plugins/ultisnips.vim	/^let g:UltiSnipsJumpBackwardTrigger = '<m-k>'$/;"	v
g:UltiSnipsJumpForwardTrigger	config/plugins/ultisnips.vim	/^let g:UltiSnipsJumpForwardTrigger  = '<m-j>'$/;"	v
g:UltiSnipsSnippetDirectories	config/plugins/ultisnips.vim	/^let g:UltiSnipsSnippetDirectories = ['UltiSnips']$/;"	v
g:UltiSnipsSnippetsDir	config/plugins/ultisnips.vim	/^let g:UltiSnipsSnippetsDir = '~\/.cache\/plugins\/vim-snippets\/'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps = {}$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Add Cursor At Pos"]           = '<C-c>'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Find Next"]                   = '}'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Find Operator"]               = "m"$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Find Prev"]                   = '{'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Goto Next"]                   = ']'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Goto Prev"]                   = '['$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Invert Direction"]            = 'o'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Remove Region"]               = 'q'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Select All"]                  = '<c-m>'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Start Regex Search"]          = '\\\\\/'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Surround"]                    = 'S'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Switch Mode"]                 = '<Tab>'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Visual All"]                  = '<c-m>'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps["Visual Regex"]                = '\\\\\/'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps['Find Subword Under']          = '<C-n>'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps['Find Under']                  = '<C-n>'$/;"	v
g:VM_maps	config/plugins/vim-visual-multi.vim	/^let g:VM_maps['Visual Add']				     = '<C-c>'$/;"	v
g:VM_show_warnings	config/plugins/vim-visual-multi.vim	/^let g:VM_show_warnings = 0$/;"	v
g:VM_theme	config/plugins/vim-visual-multi.vim	/^let g:VM_theme='ocean'$/;"	v
g:_plug_bang	autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:airline#extensions#coc#enabled	config/plugins/vim-airline.vim	/^let g:airline#extensions#coc#enabled = 0$/;"	v
g:airline#extensions#tabline#buffer_nr_show	config/plugins/vim-airline.vim	/^let g:airline#extensions#tabline#buffer_nr_show = 1$/;"	v
g:airline#extensions#tabline#enabled	config/plugins/vim-airline.vim	/^let g:airline#extensions#tabline#enabled = 0    " 打开buffer$/;"	v
g:airline#extensions#tabline#exclude_buffers	config/plugins/vim-airline.vim	/^let g:airline#extensions#tabline#exclude_buffers = ["[defx]", "!", "vimfiler", "nnn"]$/;"	v
g:airline#extensions#tabline#formatter	config/plugins/vim-airline.vim	/^let g:airline#extensions#tabline#formatter = 'unique_tail'$/;"	v
g:airline#extensions#tabline#left_alt_sep	config/plugins/vim-airline.vim	/^let g:airline#extensions#tabline#left_alt_sep = '>'$/;"	v
g:airline#extensions#tabline#show_tab_nr	config/plugins/vim-airline.vim	/^let g:airline#extensions#tabline#show_tab_nr = 1$/;"	v
g:airline#extensions#tabline#show_tab_type	config/plugins/vim-airline.vim	/^let g:airline#extensions#tabline#show_tab_type = 1$/;"	v
g:airline#extensions#tabline#tab_nr_type	config/plugins/vim-airline.vim	/^let g:airline#extensions#tabline#tab_nr_type= 2$/;"	v
g:airline#extensions#tabline#tabs_label	config/plugins/vim-airline.vim	/^let g:airline#extensions#tabline#tabs_label = 'TABS'$/;"	v
g:airline_powerline_fonts	config/plugins/vim-airline.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_section_x	config/plugins/vim-airline.vim	/^	let g:airline_section_x = '%{coc#status()}'$/;"	v
g:ale_completion_enabled	config/plugins/ale.vim	/^let g:ale_completion_enabled = 1$/;"	v
g:ale_cpp_ccls_init_options	config/plugins/ale.vim	/^let g:ale_cpp_ccls_init_options = {$/;"	v
g:ale_echo_msg_error_str	config/plugins/ale.vim	/^let g:ale_echo_msg_error_str = 'ㄨ'$/;"	v
g:ale_echo_msg_format	config/plugins/ale.vim	/^let g:ale_echo_msg_format = '[%severity% %linter%] -> %s'$/;"	v
g:ale_echo_msg_warning_str	config/plugins/ale.vim	/^let g:ale_echo_msg_warning_str = 'ϟ'$/;"	v
g:ale_linters	config/plugins/ale.vim	/^let g:ale_linters = {$/;"	v
g:ale_linters_explicit	config/plugins/ale.vim	/^let g:ale_linters_explicit = 1$/;"	v
g:ale_sign_column_always	config/plugins/ale.vim	/^let g:ale_sign_column_always = 1$/;"	v
g:ale_sign_error	config/plugins/ale.vim	/^let g:ale_sign_error = 'hhhE'$/;"	v
g:ale_sign_warning	config/plugins/ale.vim	/^let g:ale_sign_warning = 'W'$/;"	v
g:ale_statusline_format	config/plugins/ale.vim	/^let g:ale_statusline_format = ['ㄨ %d', 'ϟ %d', '✔ OK']$/;"	v
g:better_whitespace_guicolor	all_config_in_one_file.vim	/^	let g:better_whitespace_guicolor='white'$/;"	v
g:better_whitespace_guicolor	config/plugins/vim-better-whitespace.vim	/^let g:better_whitespace_guicolor='white'$/;"	v
g:bookmark_auto_save_file	config/plugins/vim-bookmarks.vim	/^let g:bookmark_auto_save_file = $HOME.'\/.cache\/vim\/vim-bookmarks'$/;"	v
g:bookmark_sign	colors/rafi-2017.vim	/^let g:bookmark_sign = '⚐'$/;"	v
g:choosewin_blink_on_land	colors/rafi-2017.vim	/^let g:choosewin_blink_on_land = 0$/;"	v
g:choosewin_color_label	colors/rafi-2017.vim	/^let g:choosewin_color_label = {$/;"	v
g:choosewin_color_label_current	colors/rafi-2017.vim	/^let g:choosewin_color_label_current = {$/;"	v
g:choosewin_color_other	colors/rafi-2017.vim	/^let g:choosewin_color_other = {$/;"	v
g:choosewin_color_overlay	colors/rafi-2017.vim	/^let g:choosewin_color_overlay = {$/;"	v
g:choosewin_color_overlay_current	colors/rafi-2017.vim	/^let g:choosewin_color_overlay_current = {$/;"	v
g:choosewin_label	colors/rafi-2017.vim	/^let g:choosewin_label = 'SDFJKLZXCV'$/;"	v
g:choosewin_overlay_clear_multibyte	colors/rafi-2017.vim	/^let g:choosewin_overlay_clear_multibyte = 0$/;"	v
g:choosewin_overlay_enable	colors/rafi-2017.vim	/^let g:choosewin_overlay_enable = 1$/;"	v
g:choosewin_statusline_replace	colors/rafi-2017.vim	/^let g:choosewin_statusline_replace = 1$/;"	v
g:clever_f_across_no_line	all_config_in_one_file.vim	/^	let g:clever_f_across_no_line=0$/;"	v
g:clever_f_across_no_line	config/plugins/clever-f.vim.vim	/^let g:clever_f_across_no_line=0$/;"	v
g:clever_f_show_prompt	all_config_in_one_file.vim	/^	let g:clever_f_show_prompt=1$/;"	v
g:clever_f_show_prompt	config/plugins/clever-f.vim.vim	/^let g:clever_f_show_prompt=1$/;"	v
g:clever_f_smart_case	all_config_in_one_file.vim	/^	let g:clever_f_smart_case=1$/;"	v
g:clever_f_smart_case	config/plugins/clever-f.vim.vim	/^let g:clever_f_smart_case=1$/;"	v
g:closetag_close_shortcut	config/plugins/vim-closetag.vim	/^let g:closetag_close_shortcut = '<leader>>'$/;"	v
g:closetag_emptyTags_caseSensitive	config/plugins/vim-closetag.vim	/^let g:closetag_emptyTags_caseSensitive = 1$/;"	v
g:closetag_filenames	config/plugins/vim-closetag.vim	/^let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.xml'$/;"	v
g:closetag_filetypes	config/plugins/vim-closetag.vim	/^let g:closetag_filetypes = 'html,xhtml,phtml'$/;"	v
g:closetag_regions	config/plugins/vim-closetag.vim	/^let g:closetag_regions = {$/;"	v
g:closetag_shortcut	config/plugins/vim-closetag.vim	/^let g:closetag_shortcut = '>'$/;"	v
g:closetag_xhtml_filetypes	config/plugins/vim-closetag.vim	/^let g:closetag_xhtml_filetypes = 'xhtml,jsx'$/;"	v
g:coc_data_home	config/plugins/coc.nvim.vim	/^let g:coc_data_home = $HOME."\/.cache\/vim\/coc"$/;"	v
g:coc_global_extensions	all_config_in_one_file.vim	/^	let g:coc_global_extensions =$/;"	v
g:coc_global_extensions	config/plugins/coc.nvim.vim	/^let g:coc_global_extensions =$/;"	v
g:coc_snippet_next	all_config_in_one_file.vim	/^	let g:coc_snippet_next = '<m-j>'$/;"	v
g:coc_snippet_next	config/plugins/coc.nvim.vim	/^let g:coc_snippet_next = '<m-j>'$/;"	v
g:coc_snippet_prev	all_config_in_one_file.vim	/^	let g:coc_snippet_prev = '<m-k>'$/;"	v
g:coc_snippet_prev	config/plugins/coc.nvim.vim	/^let g:coc_snippet_prev = '<m-k>'$/;"	v
g:defx_git#indicators	colors/rafi-2017.vim	/^let g:defx_git#indicators = {$/;"	v
g:defx_icons_column_length	config/plugins/defx.nvim.vim	/^    let g:defx_icons_column_length = 2$/;"	v
g:defx_icons_default_icon	config/plugins/defx.nvim.vim	/^    let g:defx_icons_default_icon = ''$/;"	v
g:defx_icons_directory_icon	config/plugins/defx.nvim.vim	/^    let g:defx_icons_directory_icon = ''$/;"	v
g:defx_icons_directory_symlink_icon	config/plugins/defx.nvim.vim	/^    let g:defx_icons_directory_symlink_icon = ''$/;"	v
g:defx_icons_enable_syntax_highlight	config/plugins/defx.nvim.vim	/^    let g:defx_icons_enable_syntax_highlight = 1$/;"	v
g:defx_icons_mark_icon	config/plugins/defx.nvim.vim	/^    let g:defx_icons_mark_icon = '*'$/;"	v
g:defx_icons_nested_closed_tree_icon	config/plugins/defx.nvim.vim	/^    let g:defx_icons_nested_closed_tree_icon = ''$/;"	v
g:defx_icons_nested_opened_tree_icon	config/plugins/defx.nvim.vim	/^    let g:defx_icons_nested_opened_tree_icon = ''$/;"	v
g:defx_icons_parent_icon	config/plugins/defx.nvim.vim	/^    let g:defx_icons_parent_icon = ''$/;"	v
g:defx_icons_root_opened_tree_icon	config/plugins/defx.nvim.vim	/^    let g:defx_icons_root_opened_tree_icon = ''$/;"	v
g:eleline_powerline_fonts	config/plugins/eleline.vim.vim	/^let g:eleline_powerline_fonts = 1$/;"	v
g:formatdef_my_custom_c	config/plugins/vim-autoformat.vim	/^let g:formatdef_my_custom_c = "'astyle --mode=c --style=allman '"$/;"	v
g:formatdef_my_custom_cpp	config/plugins/vim-autoformat.vim	/^let g:formatdef_my_custom_cpp = "'astyle --style=google' "$/;"	v
g:formatdef_my_custom_h	config/plugins/vim-autoformat.vim	/^let g:formatdef_my_custom_h = '"astyle --mode=c --style=allman" '$/;"	v
g:formatdef_my_custom_hpp	config/plugins/vim-autoformat.vim	/^let g:formatdef_my_custom_hpp = "'astyle --style=google' "$/;"	v
g:formatdef_my_custom_java	config/plugins/vim-autoformat.vim	/^let g:formatdef_my_custom_java = "'astyle --style=java'"$/;"	v
g:formatdef_my_custom_py	config/plugins/vim-autoformat.vim	/^let g:formatdef_my_custom_py = "'autopep8 --in-place --aggressive --max-line-length=120 '"$/;"	v
g:formatters_c	config/plugins/vim-autoformat.vim	/^let g:formatters_c = ['my_custom_c']$/;"	v
g:formatters_cpp	config/plugins/vim-autoformat.vim	/^let g:formatters_cpp = ['my_custom_cpp']$/;"	v
g:formatters_h	config/plugins/vim-autoformat.vim	/^let g:formatters_h = ['my_custom_h']$/;"	v
g:formatters_hpp	config/plugins/vim-autoformat.vim	/^let g:formatters_hpp = ['my_custom_hpp']$/;"	v
g:formatters_java	config/plugins/vim-autoformat.vim	/^let g:formatters_java = ['my_custom_java']$/;"	v
g:formatters_py	config/plugins/vim-autoformat.vim	/^let g:formatters_py = ['my_custom_py']$/;"	v
g:fzf_layout	config/plugins/coc-fzf.vim	/^let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }$/;"	v
g:gitgutter_sign_added	colors/rafi-2017.vim	/^let g:gitgutter_sign_added = '▎'$/;"	v
g:gitgutter_sign_modified	colors/rafi-2017.vim	/^let g:gitgutter_sign_modified = '▎'$/;"	v
g:gitgutter_sign_modified_removed	colors/rafi-2017.vim	/^let g:gitgutter_sign_modified_removed = '▋'$/;"	v
g:gitgutter_sign_removed	colors/rafi-2017.vim	/^let g:gitgutter_sign_removed = '▏'$/;"	v
g:gitgutter_sign_removed_first_line	colors/rafi-2017.vim	/^let g:gitgutter_sign_removed_first_line = '▔'$/;"	v
g:goyo_height	all_config_in_one_file.vim	/^	let g:goyo_height = '90%'$/;"	v
g:goyo_height	config/plugins/goyo.vim.vim	/^let g:goyo_height = '90%'$/;"	v
g:goyo_linenr	all_config_in_one_file.vim	/^	let g:goyo_linenr = 0$/;"	v
g:goyo_linenr	config/plugins/goyo.vim.vim	/^let g:goyo_linenr = 0$/;"	v
g:goyo_width	all_config_in_one_file.vim	/^	let g:goyo_width = '80'$/;"	v
g:goyo_width	config/plugins/goyo.vim.vim	/^let g:goyo_width = '80'$/;"	v
g:graphviz_output_format	config/plugins/graphviz.vim.vim	/^let g:graphviz_output_format = 'png'$/;"	v
g:graphviz_viewer	config/plugins/graphviz.vim.vim	/^let g:graphviz_viewer = 'open'$/;"	v
g:indentLine_char	all_config_in_one_file.vim	/^	let g:indentLine_char = '▏'$/;"	v
g:indentLine_char	config/plugins/indentline.vim	/^let g:indentLine_char = '▏'$/;"	v
g:indentLine_concealcursor	all_config_in_one_file.vim	/^	let g:indentLine_concealcursor = 'niv'$/;"	v
g:indentLine_concealcursor	config/plugins/indentline.vim	/^let g:indentLine_concealcursor = 'niv'$/;"	v
g:indentLine_enable	all_config_in_one_file.vim	/^	let g:indentLine_enable = 1$/;"	v
g:indentLine_enable	config/plugins/indentline.vim	/^let g:indentLine_enable = 1$/;"	v
g:indentLine_setColors	all_config_in_one_file.vim	/^	let g:indentLine_setColors = 1$/;"	v
g:indentLine_setColors	config/plugins/indentline.vim	/^let g:indentLine_setColors = 1$/;"	v
g:indentline_filetypeexclude	all_config_in_one_file.vim	/^	let g:indentline_filetypeexclude = ['defx', 'startify', 'terminal']$/;"	v
g:indentline_filetypeexclude	config/plugins/indentline.vim	/^let g:indentline_filetypeexclude = ['defx', 'startify', 'terminal']$/;"	v
g:jupyter_mapkeys	config/plugins/jupyter-vim.vim	/^let g:jupyter_mapkeys = 0$/;"	v
g:keysound_enable	config/plugins/vim-keysound.vim	/^let g:keysound_enable=1$/;"	v
g:keysound_py_version	config/plugins/vim-keysound.vim	/^let g:keysound_py_version = 3$/;"	v
g:keysound_theme	config/plugins/vim-keysound.vim	/^let g:keysound_theme='typewriter'$/;"	v
g:keysound_volume	config/plugins/vim-keysound.vim	/^let g:keysound_volume=40000$/;"	v
g:lightline	all_config_in_one_file.vim	/^	let g:lightline = {$/;"	v
g:lightline	config/plugins/lightline.vim.vim	/^let g:lightline = {$/;"	v
g:lightline#colorscheme#gruvbox9#palette	colors/gruvbox9.vim	/^let g:lightline#colorscheme#gruvbox9#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:limelight_bop	config/plugins/limelight.vim.vim	/^let g:limelight_bop = '^\\s'$/;"	v
g:limelight_conceal_ctermfg	config/plugins/limelight.vim.vim	/^let g:limelight_conceal_ctermfg = 'gray'$/;"	v
g:limelight_conceal_ctermfg	config/plugins/limelight.vim.vim	/^let g:limelight_conceal_ctermfg = 240$/;"	v
g:limelight_conceal_guifg	config/plugins/limelight.vim.vim	/^let g:limelight_conceal_guifg = '#777777'$/;"	v
g:limelight_conceal_guifg	config/plugins/limelight.vim.vim	/^let g:limelight_conceal_guifg = 'DarkGray'$/;"	v
g:limelight_default_coefficient	config/plugins/limelight.vim.vim	/^let g:limelight_default_coefficient = 0.7$/;"	v
g:limelight_eop	config/plugins/limelight.vim.vim	/^let g:limelight_eop = '\\ze\\n^\\s'$/;"	v
g:limelight_paragraph_span	config/plugins/limelight.vim.vim	/^let g:limelight_paragraph_span = 5$/;"	v
g:limelight_priority	config/plugins/limelight.vim.vim	/^let g:limelight_priority = -1$/;"	v
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:mapleader	config/plugins/vim-which-key.vim	/^let g:mapleader = "\\<Space>"$/;"	v
g:maplocalleader	config/plugins/vim-which-key.vim	/^let g:maplocalleader = ','$/;"	v
g:markdown_fenced_languages	all_config_in_one_file.vim	/^	let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']$/;"	v
g:markdown_fenced_languages	config/plugins/vim-markdown.vim	/^let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']$/;"	v
g:markdown_minlines	all_config_in_one_file.vim	/^	let g:markdown_minlines = 50$/;"	v
g:markdown_minlines	config/plugins/vim-markdown.vim	/^let g:markdown_minlines = 50$/;"	v
g:markdown_syntax_conceal	all_config_in_one_file.vim	/^	let g:markdown_syntax_conceal = 0$/;"	v
g:markdown_syntax_conceal	config/plugins/vim-markdown.vim	/^let g:markdown_syntax_conceal = 0$/;"	v
g:mundo_help	config/plugins/vim-mundo.vim	/^let g:mundo_help = 0$/;"	v
g:mundo_preview_bottom	config/plugins/vim-mundo.vim	/^let g:mundo_preview_bottom = 0$/;"	v
g:mundo_preview_height	config/plugins/vim-mundo.vim	/^let g:mundo_preview_height = 15$/;"	v
g:mundo_right	config/plugins/vim-mundo.vim	/^let g:mundo_right = 1$/;"	v
g:mundo_width	config/plugins/vim-mundo.vim	/^let g:mundo_width = 60$/;"	v
g:ncm2_jedi#python_version	config/plugins/ncm2.vim	/^let g:ncm2_jedi#python_version=3$/;"	v
g:neomake_error_sign	colors/rafi-2017.vim	/^let g:neomake_error_sign = {'text': '⚠', 'texthl': 'ErrorMsg'}$/;"	v
g:neomake_info_sign	colors/rafi-2017.vim	/^let g:neomake_info_sign = {'text': '⊹', 'texthl': 'NeomakeInfoSign'}$/;"	v
g:neomake_message_sign	colors/rafi-2017.vim	/^let g:neomake_message_sign = {'text': '⌂', 'texthl': 'NeomakeMessageSign'}$/;"	v
g:neomake_warning_sign	colors/rafi-2017.vim	/^let g:neomake_warning_sign = {'text': '⌁', 'texthl': 'WarningSyntax'}$/;"	v
g:nnn#set_default_mappings	config/plugins/nnn.vim.vim	/^let g:nnn#set_default_mappings = 0$/;"	v
g:one_allow_italics	config/theme.vim	/^let g:one_allow_italics = 1 " support italics$/;"	v
g:plug_home	autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:quickrun_config	all_config_in_one_file.vim	/^	let g:quickrun_config = {$/;"	v
g:quickrun_config	config/plugins/vim-quickrun.vim	/^let g:quickrun_config = {$/;"	v
g:quickrun_no_default_key_mappings	all_config_in_one_file.vim	/^	let g:quickrun_no_default_key_mappings = 1$/;"	v
g:quickrun_no_default_key_mappings	config/plugins/vim-quickrun.vim	/^let g:quickrun_no_default_key_mappings = 1$/;"	v
g:rainbow_active	all_config_in_one_file.vim	/^	let g:rainbow_active = 1$/;"	v
g:rainbow_active	config/plugins/rainbow.vim	/^let g:rainbow_active = 1$/;"	v
g:ranger_map_keys	config/plugins/ranger.vim.vim	/^let g:ranger_map_keys = 0 " 取消默认的leader f$/;"	v
g:ranger_replace_netrw	config/plugins/ranger.vim.vim	/^let g:ranger_replace_netrw = 1 " open ranger when vim open a directory$/;"	v
g:rustfmt_autosave	config/plugins/rust.vim.vim	/^let g:rustfmt_autosave = 1 " rust 保存时自动格式化$/;"	v
g:spaceline_colorscheme	config/plugins/spaceline.vim.vim	/^let g:spaceline_colorscheme = "space" " 主题$/;"	v
g:spaceline_line_symbol	config/plugins/spaceline.vim.vim	/^let g:spaceline_line_symbol = 1 " 不显示太多信息$/;"	v
g:spaceline_seperate_style	config/plugins/spaceline.vim.vim	/^let g:spaceline_seperate_style= 'slant-fade' "slant-fade none arrow arrow-fade curve slant$/;"	v
g:startify_custom_header	config/plugins/vim-startify.vim	/^    let g:startify_custom_header = [$/;"	v
g:startify_padding_left	config/plugins/vim-startify.vim	/^    let g:startify_padding_left = 10$/;"	v
g:strip_whitespace_confirm	all_config_in_one_file.vim	/^	let g:strip_whitespace_confirm = 0$/;"	v
g:strip_whitespace_confirm	config/plugins/vim-better-whitespace.vim	/^let g:strip_whitespace_confirm = 0$/;"	v
g:strip_whitespace_on_save	all_config_in_one_file.vim	/^	let g:strip_whitespace_on_save = 1$/;"	v
g:strip_whitespace_on_save	config/plugins/vim-better-whitespace.vim	/^let g:strip_whitespace_on_save = 1$/;"	v
g:table_mode_corner	config/plugins/vim-table-mode.vim	/^let g:table_mode_corner='|' " 默认是+$/;"	v
g:tagbar_iconchars	colors/rafi-2017.vim	/^let g:tagbar_iconchars = ['▷', '◢']$/;"	v
g:tagbar_width	config/plugins/tagbar.vim	/^    let g:tagbar_width = 35$/;"	v
g:terminal_height	all_config_in_one_file.vim	/^	let g:terminal_height=10$/;"	v
g:terminal_height	config/plugins/vim-terminal-help.vim	/^let g:terminal_height=10$/;"	v
g:terminal_list	all_config_in_one_file.vim	/^	let g:terminal_list=0 "set to 0 to hide terminal buffer in the buffer list.$/;"	v
g:terminal_list	config/plugins/vim-terminal-help.vim	/^let g:terminal_list=0 "set to 0 to hide terminal buffer in the buffer list.$/;"	v
g:tex_conceal	all_config_in_one_file.vim	/^	let g:tex_conceal='abdmg'$/;"	v
g:tex_conceal	config/plugins/vimtex.vim	/^let g:tex_conceal='abdmg'$/;"	v
g:tex_flavor	all_config_in_one_file.vim	/^	let g:tex_flavor='latex'$/;"	v
g:tex_flavor	config/plugins/vimtex.vim	/^let g:tex_flavor='latex'$/;"	v
g:tmux_navigator_save_on_switch	config/plugins/vim-tmux-navigator.vim	/^let g:tmux_navigator_save_on_switch = 2$/;"	v
g:undotree_WindowLayout	config/plugins/undotree.vim	/^    let g:undotree_WindowLayout = 3$/;"	v
g:vim_markdown_conceal_code_blocks	all_config_in_one_file.vim	/^	let g:vim_markdown_conceal_code_blocks = 0$/;"	v
g:vim_markdown_conceal_code_blocks	config/plugins/vim-markdown.vim	/^let g:vim_markdown_conceal_code_blocks = 0$/;"	v
g:vim_markdown_folding_disabled	all_config_in_one_file.vim	/^	let g:vim_markdown_folding_disabled=1 " 取消markdown的默认折叠$/;"	v
g:vim_markdown_folding_disabled	config/plugins/vim-markdown.vim	/^let g:vim_markdown_folding_disabled=1 " 取消markdown的默认折叠$/;"	v
g:vim_markdown_new_list_item_indent	all_config_in_one_file.vim	/^	let g:vim_markdown_new_list_item_indent = 2$/;"	v
g:vim_markdown_new_list_item_indent	config/plugins/vim-markdown.vim	/^let g:vim_markdown_new_list_item_indent = 2$/;"	v
g:vim_markdown_toc_autofit	all_config_in_one_file.vim	/^	let g:vim_markdown_toc_autofit=1    " toc自动修复$/;"	v
g:vim_markdown_toc_autofit	config/plugins/vim-markdown.vim	/^let g:vim_markdown_toc_autofit=1    " toc自动修复$/;"	v
g:vimtex_compiler_progname	all_config_in_one_file.vim	/^		let g:vimtex_compiler_progname = 'nvr'$/;"	v
g:vimtex_compiler_progname	config/plugins/vimtex.vim	/^	let g:vimtex_compiler_progname = 'nvr'$/;"	v
g:vimtex_quickfix_mode	all_config_in_one_file.vim	/^	let g:vimtex_quickfix_mode=0$/;"	v
g:vimtex_quickfix_mode	config/plugins/vimtex.vim	/^let g:vimtex_quickfix_mode=0$/;"	v
g:vimtex_view_method	all_config_in_one_file.vim	/^	let g:vimtex_view_method='zathura'$/;"	v
g:vimtex_view_method	config/plugins/vimtex.vim	/^let g:vimtex_view_method='zathura'$/;"	v
g:vimwiki_list	config/plugins/vimwiki.vim	/^let g:vimwiki_list = [$/;"	v
g:vista#renderer#enable_icon	all_config_in_one_file.vim	/^	let g:vista#renderer#enable_icon = 1$/;"	v
g:vista#renderer#enable_icon	config/plugins/vista.vim.vim	/^let g:vista#renderer#enable_icon = 1$/;"	v
g:vista#renderer#icons	config/plugins/vista.vim.vim	/^let g:vista#renderer#icons = {$/;"	v
g:vista_ctags_cmd	config/plugins/vista.vim.vim	/^let g:vista_ctags_cmd = {$/;"	v
g:vista_icon_indent	all_config_in_one_file.vim	/^	let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]$/;"	v
g:vista_icon_indent	config/plugins/vista.vim.vim	/^let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]$/;"	v
g:vtm_default_api	config/plugins/vim-translate-me.vim.vim	/^let g:vtm_default_api='youdao'$/;"	v
g:vtm_default_to_lang	config/plugins/vim-translate-me.vim.vim	/^let g:vtm_default_to_lang='en'$/;"	v
g:ycm_cache_omnifunc	config/plugins/YouCompleteMe.vim	/^let g:ycm_cache_omnifunc = 1$/;"	v
g:ycm_collect_identifiers_from_comments_and_strings	config/plugins/YouCompleteMe.vim	/^let g:ycm_collect_identifiers_from_comments_and_strings = 1$/;"	v
g:ycm_collect_identifiers_from_tags_files	config/plugins/YouCompleteMe.vim	/^let g:ycm_collect_identifiers_from_tags_files = 1$/;"	v
g:ycm_complete_in_comments	config/plugins/YouCompleteMe.vim	/^let g:ycm_complete_in_comments = 3$/;"	v
g:ycm_complete_in_strings	config/plugins/YouCompleteMe.vim	/^let g:ycm_complete_in_strings = 3$/;"	v
g:ycm_confirm_extra_conf	config/plugins/YouCompleteMe.vim	/^let g:ycm_confirm_extra_conf=3$/;"	v
g:ycm_enable_diagnostic_highlighting	config/plugins/YouCompleteMe.vim	/^let g:ycm_enable_diagnostic_highlighting = 2$/;"	v
g:ycm_enable_diagnostic_signs	config/plugins/YouCompleteMe.vim	/^let g:ycm_enable_diagnostic_signs = 2$/;"	v
g:ycm_error_symbol	config/plugins/YouCompleteMe.vim	/^let g:ycm_error_symbol = '●'$/;"	v
g:ycm_filetype_whitelist	config/plugins/YouCompleteMe.vim	/^let g:ycm_filetype_whitelist = {$/;"	v
g:ycm_global_ycm_extra_conf	config/plugins/YouCompleteMe.vim	/^let g:ycm_global_ycm_extra_conf='~\/.config\/nvim\/.ycm_extra_conf.py'$/;"	v
g:ycm_goto_buffer_command	config/plugins/YouCompleteMe.vim	/^let g:ycm_goto_buffer_command = 'vertical-split'$/;"	v
g:ycm_key_invoke_completion	config/plugins/YouCompleteMe.vim	/^let g:ycm_key_invoke_completion = '<c-space>'$/;"	v
g:ycm_min_num_of_chars_for_completion	config/plugins/YouCompleteMe.vim	/^let g:ycm_min_num_of_chars_for_completion = 1$/;"	v
g:ycm_seed_identifiers_with_syntax	config/plugins/YouCompleteMe.vim	/^let g:ycm_seed_identifiers_with_syntax = 1$/;"	v
g:ycm_seed_identifiers_with_syntax	config/plugins/YouCompleteMe.vim	/^let g:ycm_seed_identifiers_with_syntax=1$/;"	v
g:ycm_semantic_triggers	config/plugins/YouCompleteMe.vim	/^	let g:ycm_semantic_triggers =  {$/;"	v
g:ycm_semantic_triggers	config/plugins/YouCompleteMe.vim	/^let g:ycm_semantic_triggers = {'python': ['re!from\\s+\\S+\\s+import\\s']}$/;"	v
g:ycm_show_diagnostics_ui	config/plugins/YouCompleteMe.vim	/^let g:ycm_show_diagnostics_ui = 3$/;"	v
g:ycm_use_clangd	config/plugins/YouCompleteMe.vim	/^let g:ycm_use_clangd = 0$/;"	v
g:ycm_use_clangd	config/plugins/YouCompleteMe.vim	/^let g:ycm_use_clangd = 2$/;"	v
g:ycm_use_ultisnips_completer	config/plugins/YouCompleteMe.vim	/^let g:ycm_use_ultisnips_completer = 1$/;"	v
g:ycm_warning_symbol	config/plugins/YouCompleteMe.vim	/^let g:ycm_warning_symbol = '●'$/;"	v
gd	all_config_in_one_file.vim	/^	nmap <silent> gd <Plug>(coc-definition)$/;"	m
gd	config/plugins/LanguageClient-neovim.vim	/^nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>$/;"	m
gd	config/plugins/YouCompleteMe.vim	/^nmap gd :YcmCompleter GoToDefinition<cr>$/;"	m
gd	config/plugins/ale.vim	/^nmap gd :ALEGoToDefinition<cr>$/;"	m
gd	config/plugins/coc.nvim.vim	/^nmap <silent> gd :call <SID>GoToDefinition()<CR>$/;"	m
gi	all_config_in_one_file.vim	/^	nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gi	config/plugins/YouCompleteMe.vim	/^nmap gi :YcmCompleter GoToImprecise<cr>$/;"	m
gi	config/plugins/coc.nvim.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
git.addGBlameToBufferVar	coc-settings.json	/^    "git.addGBlameToBufferVar": true,$/;"	b
git.addGBlameToVirtualText	coc-settings.json	/^    "git.addGBlameToVirtualText": true,$/;"	b
git.addedSign.hlGroup	coc-settings.json	/^    "git.addedSign.hlGroup": "GitGutterAdd",$/;"	s
git.addedSign.text	coc-settings.json	/^    "git.addedSign.text": "▎",$/;"	s
git.changeRemovedSign.hlGroup	coc-settings.json	/^    "git.changeRemovedSign.hlGroup": "GitGutterChangeDelete",$/;"	s
git.changeRemovedSign.text	coc-settings.json	/^    "git.changeRemovedSign.text": "▋",$/;"	s
git.changedSign.hlGroup	coc-settings.json	/^    "git.changedSign.hlGroup": "GitGutterChange",$/;"	s
git.changedSign.text	coc-settings.json	/^    "git.changedSign.text": "▎",$/;"	s
git.removedSign.hlGroup	coc-settings.json	/^    "git.removedSign.hlGroup": "GitGutterDelete",$/;"	s
git.removedSign.text	coc-settings.json	/^    "git.removedSign.text": "▏",$/;"	s
git.topRemovedSign.hlGroup	coc-settings.json	/^    "git.topRemovedSign.hlGroup": "GitGutterDelete",$/;"	s
git.topRemovedSign.text	coc-settings.json	/^    "git.topRemovedSign.text": "▔",$/;"	s
git.virtualTextPrefix	coc-settings.json	/^    "git.virtualTextPrefix": "  ··· ",$/;"	s
gk	all_config_in_one_file.vim	/^    nmap gk <Plug>(easymotion-overwin-f)$/;"	m
gk	config/keymap.vim	/^    nmap gk <Plug>(easymotion-overwin-f)$/;"	m
gl	all_config_in_one_file.vim	/^    nmap gl <Plug>(easymotion-overwin-line)$/;"	m
gl	config/keymap.vim	/^    nmap gl <Plug>(easymotion-overwin-line)$/;"	m
gr	all_config_in_one_file.vim	/^	nmap <silent> gr <Plug>(coc-references)$/;"	m
gr	config/plugins/ale.vim	/^nmap gr :ALEFindReferences<cr>$/;"	m
gr	config/plugins/coc.nvim.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gt	config/plugins/YouCompleteMe.vim	/^nmap gt :YcmCompleter GoTo<cr>$/;"	m
gy	all_config_in_one_file.vim	/^	nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
gy	config/plugins/coc.nvim.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
h	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> h       defx#do_action('call', 'DefxSmartH')$/;"	m
highlight.document.enable	coc-settings.json	/^    "highlight.document.enable": true,$/;"	b
j	all_config_in_one_file.vim	/^nnoremap j gj$/;"	m
j	all_config_in_one_file.vim	/^vnoremap j gj$/;"	m
j	config/keymap.vim	/^nnoremap j gj$/;"	m
j	config/keymap.vim	/^vnoremap j gj$/;"	m
j	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> j       line('.') == line('$') ? 'gg' : 'j'$/;"	m
jk	all_config_in_one_file.vim	/^inoremap jk <esc> " jk执行esc$/;"	m
jk	all_config_in_one_file.vim	/^inoremap jk <esc>$/;"	m
jk	config/keymap.vim	/^inoremap jk <esc>$/;"	m
k	all_config_in_one_file.vim	/^nnoremap k gk$/;"	m
k	all_config_in_one_file.vim	/^vnoremap k gk$/;"	m
k	config/keymap.vim	/^nnoremap k gk$/;"	m
k	config/keymap.vim	/^vnoremap k gk$/;"	m
k	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> k       line('.') == 1 ? 'hhhG' : 'k'$/;"	m
l	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> l       defx#do_action('call', 'DefxSmartL')$/;"	m
list.autoResize	coc-settings.json	/^    "list.autoResize": false,$/;"	b
list.maxHeight	coc-settings.json	/^    "list.maxHeight": 10,$/;"	n
list.maxPreviewHeight	coc-settings.json	/^    "list.maxPreviewHeight": 8,$/;"	n
list.source.files.command	coc-settings.json	/^    "list.source.files.command": "fd", \/\/文件搜索命令，默认使用find，改成fd，需/;"	s
list.source.grep.command	coc-settings.json	/^    "list.source.grep.command": "rg",$/;"	s
list.source.words.defaultArgs	coc-settings.json	/^    "list.source.words.defaultArgs": ["-e"],$/;"	a
mygroup	all_config_in_one_file.vim	/^	augroup mygroup$/;"	a
mygroup	config/plugins/coc.nvim.vim	/^augroup mygroup$/;"	a
name	coc-settings.json	/^            "name": "buffer",$/;"	s	object:explorer.sources.0
name	coc-settings.json	/^            "name": "file",$/;"	s	object:explorer.sources.1
nerdtree	colors/rafi-2017.vim	/^augroup nerdtree-highlights$/;"	a
o	autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
o	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> o       defx#do_action('call', 'DefxSmartO')$/;"	m
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
python.jediEnabled	coc-settings.json	/^    "python.jediEnabled": false, \/\/ 需要安装jdei$/;"	b
python.trace.server	coc-settings.json	/^    "python.trace.server": "verbose",$/;"	s
q	all_config_in_one_file.vim	/^nnoremap q <esc>:close<cr> " 关闭窗口$/;"	m
q	all_config_in_one_file.vim	/^nnoremap q <esc>:close<cr>$/;"	m
q	all_config_in_one_file.vim	/^vnoremap q <esc>:close<cr>$/;"	m
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
q	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> q       defx#do_action('quit')$/;"	m
ranger_command_override	config/plugins/ranger.vim.vim	/^let ranger_command_override = 'ranger --cmd "set show_hidden=true"'$/;"	v
s	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> s       defx#do_action('search', getcwd())$/;"	m
s:DefxWinNr	config/plugins/defx.nvim.vim	/^    let s:DefxWinNr = -1$/;"	v
s:GoToDefinition	config/plugins/coc.nvim.vim	/^function! s:GoToDefinition() abort$/;"	f
s:NERDTreeHighlight	colors/rafi-2017.vim	/^function! s:NERDTreeHighlight()$/;"	f
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:aqua	colors/gruvbox9.vim	/^let s:aqua   = [ '#689d6a', 72 ]$/;"	v
s:ask	autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	autoload/plug.vim	/^function! s:bar()$/;"	f
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:batchfile	autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
s:beforWinnr	config/plugins/defx.nvim.vim	/^    let s:beforWinnr = -1$/;"	v
s:beforewinnr	all_config_in_one_file.vim	/^	let s:beforewinnr = -1$/;"	v
s:bg	colors/gruvbox9.vim	/^let s:bg = [ '#282828', 235 ]$/;"	v
s:bg0	colors/gruvbox9.vim	/^let s:bg0 = [ '#282828', 235 ]$/;"	v
s:bg0_h	colors/gruvbox9.vim	/^let s:bg0_h = ['#1d2021',234]$/;"	v
s:bg1	colors/gruvbox9.vim	/^let s:bg1 = [ '#3c3836', 237 ]$/;"	v
s:bg2	colors/gruvbox9.vim	/^let s:bg2 = [ '#504945', 239 ]$/;"	v
s:bg3	colors/gruvbox9.vim	/^let s:bg3 = [ '#665c54', 241 ]$/;"	v
s:bg4	colors/gruvbox9.vim	/^let s:bg4 = [ '#7c6f64', 243 ]$/;"	v
s:bg_icon	colors/gruvbox9.vim	/^let s:bg_icon = ['#444444',238]$/;"	v
s:blue	colors/gruvbox9.vim	/^let s:blue = [ '#458588', 66 ]$/;"	v
s:blue1	colors/gruvbox9.vim	/^let s:blue1 = [ '#0087d7', 32 ]$/;"	v
s:check_back_space	all_config_in_one_file.vim	/^	function! s:check_back_space() abort$/;"	f
s:check_back_space	config/plugins/coc.nvim.vim	/^function! s:check_back_space() abort$/;"	f
s:check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:code_actions	config/plugins/actionmenu.vim.vim	/^let s:code_actions = []$/;"	v
s:compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:defx_close_tab	config/plugins/defx.nvim.vim	/^    function! s:defx_close_tab(tabnr)$/;"	f
s:defx_custom_settings	config/plugins/defx.nvim.vim	/^    function! s:defx_custom_settings() abort$/;"	f
s:delete	autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:delete_op	autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:diff	autoload/plug.vim	/^function! s:diff()$/;"	f
s:dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:disable_statusline	colors/rafi-2017.vim	/^let s:disable_statusline =$/;"	v
s:do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:fg0	colors/gruvbox9.vim	/^let s:fg0 = [ '#fbf1c7', 229 ]$/;"	v
s:fg1	colors/gruvbox9.vim	/^let s:fg1 = [ '#ebdbb2', 223 ]$/;"	v
s:fg2	colors/gruvbox9.vim	/^let s:fg2 = [ '#d5c4a1', 250 ]$/;"	v
s:fg3	colors/gruvbox9.vim	/^let s:fg3 = [ '#bdae93', 248 ]$/;"	v
s:fg4	colors/gruvbox9.vim	/^let s:fg4 = [ '#a89984', 246 ]$/;"	v
s:find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:first_rtp	autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:goyo_enter	all_config_in_one_file.vim	/^	function! s:goyo_enter()$/;"	f
s:goyo_enter	config/plugins/goyo.vim.vim	/^function! s:goyo_enter()$/;"	f
s:goyo_leave	all_config_in_one_file.vim	/^	function! s:goyo_leave()$/;"	f
s:goyo_leave	config/plugins/goyo.vim.vim	/^function! s:goyo_leave()$/;"	f
s:gray	colors/gruvbox9.vim	/^let s:gray = [ '#a89984', 246 ]$/;"	v
s:green	colors/gruvbox9.vim	/^let s:green   = [ '#98971a', 106 ]$/;"	v
s:hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:home	init.vim	/^ let s:home = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:home	init.vim	/^ let s:home = s:home.'\/config'$/;"	v
s:home	vimrc	/^ let s:home = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:home	vimrc	/^ let s:home = s:home.'\/config'$/;"	v
s:infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:isAtStartOfLine	config/plugins/vim-table-mode.vim	/^function! s:isAtStartOfLine(mapping)$/;"	f
s:is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_cb	autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_exit_cb	autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_out_cb	autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:l	sessions/default.vim	/^let s:l = 71 - ((32 * winheight(0) + 25) \/ 50)$/;"	v
s:last_non_empty_line	autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:last_rtp	autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lazy	autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
s:lightline_is_lean	all_config_in_one_file.vim	/^	function! s:lightline_is_lean() abort$/;"	f
s:lightline_is_lean	config/plugins/lightline.vim.vim	/^function! s:lightline_is_lean() abort$/;"	f
s:lightline_is_plain	all_config_in_one_file.vim	/^	function! s:lightline_is_plain() abort$/;"	f
s:lightline_is_plain	config/plugins/lightline.vim.vim	/^function! s:lightline_is_plain() abort$/;"	f
s:lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:load_plugin	autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:names	autoload/plug.vim	/^function! s:names(...)$/;"	f
s:new_tab_before	config/keymap.vim	/^function s:new_tab_before() abort$/;"	f
s:new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim_cb	autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:openfloat	config/plugins/defx.nvim.vim	/^    let s:openfloat = 0$/;"	v
s:openleft	config/plugins/defx.nvim.vim	/^    let s:openleft = 0$/;"	v
s:orange	colors/gruvbox9.vim	/^let s:orange   = [ '#d65d0e', 166 ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.inactive.left =  [ [ s:bg4, s:bg1 ], [ s:bg4, s:bg1 ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.inactive.middle = [ [ s:bg4, s:bg1 ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.inactive.right = [ [ s:bg4, s:bg1 ], [ s:bg4, s:bg1 ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.insert.left = [ [ s:bg0, s:blue, 'bold'], [ s:fg4, s:bg3],[ s:fg3, s:bg4] ,[s:blue1,s:/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.insert.middle = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.insert.right = [ [ s:bg0, s:blue ], [ s:bg0, s:fg4 ],[ s:bg0, s:bg4 ] ,[s:red,s:bg1],[/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.normal.error = [ [ s:bg0, s:orange ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.normal.left = [ [ s:bg0, s:green, 'bold' ], [ s:fg4, s:bg3] ,[s:fg3,s:bg4],[s:blue1,s:/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.normal.middle = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.normal.right = [ [ s:bg0, s:green ], [ s:bg0, s:fg4 ],[ s:bg0, s:bg4 ] ,[s:red,s:bg1],/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.normal.warning = [ [ s:bg2, s:yellow ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.replace.left = [ [ s:bg0, s:aqua, 'bold' ], [ s:fg1, s:bg0 ] ,[ s:fg3, s:bg4] ,[s:blue/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.replace.middle = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.replace.right = [ [ s:bg0, s:aqua ], [ s:bg0, s:fg4 ],[ s:bg0, s:bg4 ] ,[s:red,s:bg1],/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.tabline.left = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.tabline.middle = [ [ s:bg0, s:bg0 ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.tabline.right = [ [ s:bg0, s:orange ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.tabline.tabsel = [ [ s:bg0, s:green ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.terminal.left = [ [ s:bg0, s:green, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.terminal.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.terminal.right = [ [ s:bg0, s:green ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.visual.left = [ [ s:bg0, s:orange, 'bold' ], [ s:fg1, s:bg0 ],[s:fg3,s:bg4],[s:blue1,s/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.visual.middle = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	colors/gruvbox9.vim	/^  let s:p.visual.right = [ [ s:bg0, s:orange ], [ s:bg0, s:fg4 ],[ s:bg0, s:bg4 ] ,[s:red,s:bg1]/;"	v
s:p	colors/gruvbox9.vim	/^let s:p = {'normal':{}, 'inactive':{}, 'insert':{}, 'replace':{}, 'visual':{}, 'tabline':{}, 'te/;"	v
s:parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:patch_lucius_colors	all_config_in_one_file.vim	/^function! s:patch_lucius_colors()$/;"	f
s:path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_call	autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
s:plug_expand	autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
s:plug_fnamemodify	autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
s:plug_getcwd	autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_tempname	autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
s:plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:plugin_config_path	init.vim	/^ let s:plugin_config_path = s:home.'\/plugins'$/;"	v
s:plugin_config_path	vimrc	/^ let s:plugin_config_path = s:home.'\/plugins'$/;"	v
s:plugins_path	all_config_in_one_file.vim	/^let s:plugins_path = '~\/.cache\/plugins'$/;"	v
s:plugins_path	config/plug.vim	/^let s:plugins_path = '~\/.cache\/vim\/plugins'$/;"	v
s:prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:purple	colors/gruvbox9.vim	/^let s:purple   = [ '#b16286', 132 ]$/;"	v
s:purple1	colors/gruvbox9.vim	/^let s:purple1 = [ '#875faf', 97]$/;"	v
s:reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:red	colors/gruvbox9.vim	/^let s:red     = [ '#cc241d', 124 ]$/;"	v
s:red1	colors/gruvbox9.vim	/^let s:red1     = [ '#9d0006', 88 ]$/;"	v
s:regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reload_plugins	autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:retry	autoload/plug.vim	/^function! s:retry()$/;"	f
s:revert	autoload/plug.vim	/^function! s:revert()$/;"	f
s:rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rtp	autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
s:section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:select_current_word	all_config_in_one_file.vim	/^		function! s:select_current_word()$/;"	f
s:select_current_word	config/plugins/coc.nvim.vim	/^	function! s:select_current_word()$/;"	f
s:shellesc_cmd	autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
s:shellesc_ps1	autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
s:shellesc_sh	autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
s:show_documentation	all_config_in_one_file.vim	/^	function! s:show_documentation()$/;"	f
s:show_documentation	config/plugins/coc.nvim.vim	/^function! s:show_documentation()$/;"	f
s:snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:so_save	sessions/default.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:status	autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:stl	colors/rafi-2017.vim	/^let s:stl  = " %7*%{&paste ? '=' : ''}%*"         " Paste symbol$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= "%4*%(%{badge#trails('⤐ %s')} %)"   " Whitespace$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= "%4*%{&readonly ? '' : '#'}%*"       " Modifide symbol$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= "%6*%{badge#mode('⚠ ', 'Z')}"        " Read-only symbol$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= "%6*%{badge#modified('+')}%0*"       " Write symbol$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= ' %1*%{badge#filename()}%*'          " Filename$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= ' %<'                                " Truncate here$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= '%( %{&fenc} %)'                     " File encoding$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= '%(%{badge#syntax()} %)%*'           " syntax check$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= '%( %{badge#branch()} %)'           " Git branch name$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= '%*%n'                               " Buffer number$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= '%3*%2* %l\/%2c%4p%% '               " Line and column$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= '%4*%*%( %{&ft} %)'                 " File type$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= '%='                                 " Align to right$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= '%{badge#format()} %4*%*'           " File format$/;"	v
s:stl	colors/rafi-2017.vim	/^let s:stl .= '%{badge#indexing()}%*'              " Indexing tags indicator$/;"	v
s:stl_nc	colors/rafi-2017.vim	/^let s:stl_nc .= "%6*%{badge#modified('+')}%*"  " Write symbol$/;"	v
s:stl_nc	colors/rafi-2017.vim	/^let s:stl_nc .= ' %{badge#filename()}'         " Relative supername$/;"	v
s:stl_nc	colors/rafi-2017.vim	/^let s:stl_nc .= '%='                           " Align to right$/;"	v
s:stl_nc	colors/rafi-2017.vim	/^let s:stl_nc .= '%{&ft} '                      " File type$/;"	v
s:stl_nc	colors/rafi-2017.vim	/^let s:stl_nc = " %{badge#mode('⚠ ', 'Z')}%n"   " Readonly & buffer$/;"	v
s:switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:sx	sessions/default.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
s:system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:tick	autoload/plug.vim	/^function! s:tick()$/;"	f
s:to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:vim8	autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:wipebuf	sessions/default.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s:with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
s:wrap_cmds	autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:yellow	colors/gruvbox9.vim	/^let s:yellow  = [ '#d79921', 172 ]$/;"	v
session.directory	coc-settings.json	/^    "session.directory": "~\/.cache\/vim\/sessions\/",$/;"	s
sh	config/plugins/defx.nvim.vim	/^            nnoremap <silent><buffer><expr> sh      defx#do_action('drop', 'split')$/;"	m
snippets.shortcut	coc-settings.json	/^    "snippets.shortcut": "  Ⓢ",$/;"	s
st	config/plugins/defx.nvim.vim	/^            nnoremap <silent><buffer><expr> st      defx#do_action('drop', 'tabedit')$/;"	m
statusline	colors/rafi-2017.vim	/^augroup statusline$/;"	a
suggest.acceptSuggestionOnCommitCharacter	coc-settings.json	/^    "suggest.acceptSuggestionOnCommitCharacter": true,$/;"	b
suggest.timeout	coc-settings.json	/^    "suggest.timeout": 5000, \/\/ 超过500ms就停止$/;"	n
sv	config/plugins/defx.nvim.vim	/^            nnoremap <silent><buffer><expr> sv      defx#do_action('drop', 'vsplit')$/;"	m
user_plugin_defx	config/plugins/defx.nvim.vim	/^    augroup user_plugin_defx$/;"	a
vime	README.md	/^# vime$/;"	c
yank.enableCompletion	coc-settings.json	/^    "yank.enableCompletion": false, \/\/ 补全中不用yank$/;"	b
yy	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> yy      defx#do_action('yank_path') " 复制路径$/;"	m
~	config/plugins/defx.nvim.vim	/^        nnoremap <silent><buffer><expr> ~       defx#do_action('cd')$/;"	m
依赖	README.md	/^### 依赖$/;"	S
多光标	README.md	/^#### 多光标$/;"	t
安装	README.md	/^### 安装$/;"	S
快捷键	README.md	/^### 快捷键$/;"	S
整体结构	README.md	/^### 整体结构$/;"	S
窗口与tab操作	README.md	/^#### 窗口与tab操作$/;"	t
简单了解	README.md	/^### 简单了解$/;"	S
补全行为	README.md	/^#### 补全行为$/;"	t
